{"version":3,"sources":["components/InteractionBar/Button/Button.module.css","components/InteractionBar/InteractionBar.module.css","components/BarsContainer/Bar/Bar.module.css","components/BarsContainer/BarsContainer.module.css","containers/SortingVisualizer/SortingVisualizer.module.css","components/InteractionBar/Range/Range.module.css","components/BarsContainer/Bar/Bar.js","components/BarsContainer/BarsContainer.js","helpers/sortingHelper.js","constants/constants.js","components/InteractionBar/Button/Button.js","components/InteractionBar/Range/Range.js","components/InteractionBar/InteractionBar.js","containers/SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bar","className","classes","style","height","this","props","PureComponent","barsContainer","BarsContainer","numbers","map","number","index","key","getBubbleSortAnimations","bubbleSort","getSelectionSortAnimations","selectionSort","getInsertionSortAnimations","insertionSort","arr","len","length","animations","i","j","push","swap","min","index1","index2","temp","stop","getAnimations","sortType","button","allClasses","Button","disabled","Disabled","Button3","join","onClick","clicked","children","range","type","name","Range","value","default","max","onChange","changed","step","interactionBar","sortDetails","displayName","animationSpeed","InteractionBar","BarGroup","reset","barCount","event","changeBarCount","target","commence","sortDetail","changeSortDetail","getRandomNumbers","count","getRandomInt","Math","floor","random","SortingVisualizer","useState","setSortDetails","setNumbers","setBarCount","undefined","animationId","setAnimationId","handleReset","newNumbers","cancelAnimationFrame","slice","handleSwap","indices","requestAnimationFrame","animate","handleCommenceSort","handleSortDetailsChange","handleBarCountChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2e7337f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3qR7j\",\"Button3\":\"Button_Button3__3AwsT\",\"Disabled\":\"Button_Disabled__1bQc4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InteractionBar\":\"InteractionBar_InteractionBar__240lp\",\"BarGroup\":\"InteractionBar_BarGroup__3xY3C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bar\":\"Bar_Bar__3Vy_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BarsContainer\":\"BarsContainer_BarsContainer__17pOc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SortingVisualizer\":\"SortingVisualizer_SortingVisualizer__1kbp7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Range\":\"Range_Range__3o6vB\"};","import React, { PureComponent } from \"react\";\nimport classes from \"./Bar.module.css\";\n\nclass Bar extends PureComponent {\n  render() {\n    return (\n      <div\n        className={classes.Bar}\n        style={{ height: `${(this.props.height / 599) * 100}%` }}\n      ></div>\n    );\n  }\n}\n\nexport default Bar;\n","import React from \"react\";\nimport Bar from \"./Bar/Bar\";\n\nimport classes from \"./BarsContainer.module.css\";\n\nconst barsContainer = props => (\n  <div className={classes.BarsContainer}>\n    {props.numbers.map((number, index) => (\n      <Bar key={index} height={number}></Bar>\n    ))}\n  </div>\n);\n\nexport default barsContainer;\n","import * as constants from \"../constants/constants\";\n\nconst getAnimations = (sortType, numbers) => {\n  let animations = [];\n  switch (sortType) {\n    case constants.BUBBLE_SORT:\n      animations = getBubbleSortAnimations(numbers);\n      break;\n    case constants.SELECTION_SORT:\n      animations = getSelectionSortAnimations(numbers);\n      break;\n    case constants.INSERTION_SORT:\n      animations = getInsertionSortAnimations(numbers);\n      break;\n    default:\n      animations = [];\n  }\n  return animations;\n};\n\nconst getBubbleSortAnimations = numbers => {\n  return bubbleSort(numbers);\n};\n\nconst getSelectionSortAnimations = numbers => {\n  return selectionSort(numbers);\n};\n\nconst getInsertionSortAnimations = numbers => {\n  return insertionSort(numbers);\n};\n\nconst insertionSort = arr => {\n  let len = arr.length;\n  let animations = [];\n\n  for (let i = 1; i < len; i++) {\n    let j = i;\n    while (j > 0 && arr[j] < arr[j - 1]) {\n      animations.push([j, j - 1]);\n      swap(arr, j, j - 1);\n      j--;\n    }\n  }\n\n  return animations;\n};\n\nconst selectionSort = arr => {\n  let len = arr.length;\n  let animations = [];\n  for (let i = 0; i < len; i++) {\n    let min = i;\n    for (let j = i + 1; j < len; j++) {\n      if (arr[min] > arr[j]) {\n        min = j;\n      }\n    }\n    if (min !== i) {\n      animations.push([min, i]);\n      swap(arr, min, i);\n    }\n  }\n  return animations;\n};\n\nconst swap = (arr, index1, index2) => {\n  var temp = arr[index1];\n  arr[index1] = arr[index2];\n  arr[index2] = temp;\n};\n\nconst bubbleSort = arr => {\n  let len = arr.length,\n    i,\n    j,\n    stop;\n\n  const animations = [];\n\n  for (i = 0; i < len; i++) {\n    for (j = 0, stop = len - i; j < stop; j++) {\n      if (arr[j] > arr[j + 1]) {\n        animations.push([j, j + 1]);\n        swap(arr, j, j + 1);\n      }\n    }\n  }\n\n  return animations;\n};\n\nexport default getAnimations;\n","export const NUMBER_OF_ARRAY_BARS = 100;\n\nexport const MERGE_SORT = \"MERGE_SORT\";\n\nexport const QUICK_SORT = \"QUICK_SORT\";\n\nexport const BUBBLE_SORT = \"BUBBLE_SORT\";\n\nexport const SELECTION_SORT = \"SELECTION_SORT\";\n\nexport const INSERTION_SORT = \"INSERTION_SORT\";\n","import React from \"react\";\nimport classes from \"./Button.module.css\";\n\nconst button = props => {\n  const allClasses = [classes.Button];\n  if (props.disabled) {\n    allClasses.push(classes.Disabled);\n  } else {\n    allClasses.push(classes.Button3);\n  }\n  return (\n    <div className={allClasses.join(\" \")} onClick={props.clicked}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default button;\n","import React from \"react\";\nimport classes from \"./Range.module.css\";\n\nconst range = props => (\n  <input\n    type=\"range\"\n    name=\"range\"\n    className={classes.Range}\n    value={props.default}\n    min={props.min}\n    max={props.max}\n    onChange={props.changed}\n    step={50}\n  />\n);\n\nexport default range;\n","import React from \"react\";\nimport Button from \"./Button/Button\";\nimport Range from \"./Range/Range\";\nimport classes from \"./InteractionBar.module.css\";\n\nimport * as constants from \"../../constants/constants\";\n\nconst interactionBar = props => {\n  const sortDetails = [\n    {\n      sortType: constants.BUBBLE_SORT,\n      displayName: \"Bubble Sort\",\n      animationSpeed: 50\n    },\n    {\n      sortType: constants.SELECTION_SORT,\n      displayName: \"Selection Sort\",\n      animationSpeed: 50\n    },\n    {\n      sortType: constants.INSERTION_SORT,\n      displayName: \"Insertion Sort\",\n      animationSpeed: 50\n    },\n    {\n      sortType: constants.MERGE_SORT,\n      displayName: \"Merge Sort\",\n      animationSpeed: 50\n    },\n    {\n      sortType: constants.QUICK_SORT,\n      displayName: \"Quick Sort\",\n      animationSpeed: 50\n    }\n  ];\n  return (\n    <div className={classes.InteractionBar}>\n      <div className={classes.BarGroup}>\n        <Button clicked={props.reset}>Reset</Button>\n        <Range\n          min=\"5\"\n          max=\"255\"\n          default={props.barCount}\n          changed={event => props.changeBarCount(event.target.value)}\n        />\n        <Button clicked={props.commence}>Commence Sort!</Button>\n      </div>\n      <div className={classes.BarGroup}>\n        {sortDetails.map(sortDetail => (\n          <Button\n            disabled={sortDetail.sortType !== props.sortDetail.sortType}\n            key={sortDetail.sortType}\n            clicked={() => props.changeSortDetail(sortDetail)}\n          >\n            {sortDetail.displayName}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default interactionBar;\n","import React, { useState } from \"react\";\n\nimport BarsContainer from \"../../components/BarsContainer/BarsContainer\";\n\nimport classes from \"./SortingVisualizer.module.css\";\n\nimport * as constants from \"../../constants/constants\";\nimport getAnimations from \"../../helpers/sortingHelper\";\nimport InteractionBar from \"../../components/InteractionBar/InteractionBar\";\n\nconst SortingVisualizer = () => {\n  const [sortDetails, setSortDetails] = useState({\n    sortType: constants.BUBBLE_SORT,\n    displayName: \"Bubble Sort\",\n    animationSpeed: 50,\n  });\n\n  const [numbers, setNumbers] = useState(getRandomNumbers(55));\n\n  const [barCount, setBarCount] = useState(55);\n\n  const [animationId, setAnimationId] = useState(undefined);\n\n  const handleSortDetailsChange = (sortDetails) => {\n    handleReset();\n    setSortDetails(sortDetails);\n  };\n\n  const handleCommenceSort = () => {\n    const animations = getAnimations(sortDetails.sortType, numbers.slice());\n\n    if (animations === null || animations.length === 0) {\n      return;\n    }\n\n    let i = 0;\n\n    const animate = () => {\n      handleSwap(animations[i++]);\n      if (i < animations.length) {\n        setAnimationId(requestAnimationFrame(animate));\n      }\n    };\n\n    const handleSwap = (indices) => {\n      setNumbers((numbers) => {\n        const newNumbers = numbers.slice();\n        const number = newNumbers[indices[0]];\n        newNumbers[indices[0]] = newNumbers[indices[1]];\n        newNumbers[indices[1]] = number;\n        return newNumbers;\n      });\n    };\n\n    setAnimationId(requestAnimationFrame(animate));\n  };\n\n  const handleReset = () => {\n    const newNumbers = getRandomNumbers(barCount);\n    cancelAnimationFrame(animationId);\n    setAnimationId(undefined);\n    setNumbers(newNumbers);\n  };\n\n  const handleBarCountChange = (barCount) => {\n    const newNumbers = getRandomNumbers(barCount);\n    setBarCount(barCount);\n    setNumbers(newNumbers);\n  };\n\n  return (\n    <div className={classes.SortingVisualizer}>\n      <BarsContainer numbers={numbers} />\n      <InteractionBar\n        barCount={barCount}\n        reset={() => handleReset()}\n        commence={() => handleCommenceSort()}\n        changeSortDetail={(sortDetails) => handleSortDetailsChange(sortDetails)}\n        changeBarCount={(value) => handleBarCountChange(value)}\n        sortDetail={sortDetails}\n      />\n    </div>\n  );\n};\n\nconst getRandomNumbers = (count) => {\n  let numbers = [];\n  for (let i = 0; i < count; i++) {\n    numbers.push(getRandomInt(20, 599));\n  }\n  return numbers;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./containers/SortingVisualizer/SortingVisualizer\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}