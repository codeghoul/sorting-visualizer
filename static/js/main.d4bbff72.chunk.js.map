{"version":3,"sources":["components/InteractionBar/Button/Button.module.css","components/BarsContainer/Bar/Bar.module.css","components/BarsContainer/BarsContainer.module.css","containers/SortingVisualizer/SortingVisualizer.module.css","components/InteractionBar/Range/Range.module.css","components/InteractionBar/InteractionBar.module.css","components/BarsContainer/Bar/Bar.js","components/BarsContainer/BarsContainer.js","constants/constants.js","helpers/sortingHelper.js","components/InteractionBar/Button/Button.js","components/InteractionBar/Range/Range.js","components/InteractionBar/InteractionBar.js","containers/SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bar","nextProps","nextState","height","this","props","className","classes","style","Component","barsContainer","BarsContainer","numbers","map","number","index","key","BUBBLE_SORT","getBubbleSortAnimations","bubbleSort","getSelectionSortAnimations","selectionSort","getInsertionSortAnimations","insertionSort","arr","len","length","animations","i","j","push","swap","min","index1","index2","temp","stop","getAnimations","sortType","constants","button","Button","Button3","join","onClick","clicked","children","range","type","name","Range","value","default","max","onInput","changed","onChange","interactionBar","sortDetails","displayName","animationSpeed","InteractionBar","reset","barCount","event","changeBarCount","target","sortDetail","changeSortDetail","commence","SortingVisualizer","state","componentDidMount","handleReset","handleSortDetailChange","setState","handleCommenceSort","slice","animation","setTimeout","handleSwap","indices","newNumbers","getRandomNumbers","handleBarCountChange","count","getRandomInt","Math","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4bbff72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3qR7j\",\"Button1\":\"Button_Button1__2_rnQ\",\"Button2\":\"Button_Button2__1LiY_\",\"Button3\":\"Button_Button3__3AwsT\",\"Button4\":\"Button_Button4__3ZIM7\",\"Button5\":\"Button_Button5__2QJCN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bar\":\"Bar_Bar__3Vy_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BarsContainer\":\"BarsContainer_BarsContainer__17pOc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SortingVisualizer\":\"SortingVisualizer_SortingVisualizer__1kbp7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Range\":\"Range_Range__3o6vB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InteractionBar\":\"InteractionBar_InteractionBar__240lp\"};","import React, { Component } from \"react\";\nimport classes from \"./Bar.module.css\";\n\nclass Bar extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.height !== this.props.height;\n  }\n\n  render() {\n    return (\n      <div\n        className={classes.Bar}\n        style={{ height: `${this.props.height / 599 * 100}%` }}\n      ></div>\n    );\n  }\n}\n\nexport default Bar;\n","import React from \"react\";\nimport Bar from \"./Bar/Bar\";\n\nimport classes from \"./BarsContainer.module.css\";\n\nconst barsContainer = props => (\n  <div className={classes.BarsContainer}>\n    {props.numbers.map((number, index) => (\n      <Bar key={index} height={number}></Bar>\n    ))}\n  </div>\n);\n\nexport default barsContainer;\n","export const NUMBER_OF_ARRAY_BARS = 100;\n\nexport const MERGE_SORT = \"MERGE_SORT\";\n\nexport const QUICK_SORT = \"QUICK_SORT\";\n\nexport const BUBBLE_SORT = \"BUBBLE_SORT\";\n\nexport const SELECTION_SORT = \"SELECTION_SORT\";\n\nexport const INSERTION_SORT = \"INSERTION_SORT\";\n","import * as constants from \"../constants/constants\";\n\nconst getAnimations = (sortType, numbers) => {\n  let animations = [];\n  switch (sortType) {\n    case constants.BUBBLE_SORT:\n      animations = getBubbleSortAnimations(numbers);\n      break;\n    case constants.SELECTION_SORT:\n      animations = getSelectionSortAnimations(numbers);\n      break;\n    case constants.INSERTION_SORT:\n      animations = getInsertionSortAnimations(numbers);\n      break;\n    default:\n      animations = [];\n  }\n  return animations;\n};\n\nconst getBubbleSortAnimations = numbers => {\n  return bubbleSort(numbers);\n};\n\nconst getSelectionSortAnimations = numbers => {\n  return selectionSort(numbers);\n};\n\nconst getInsertionSortAnimations = numbers => {\n  return insertionSort(numbers);\n};\n\nconst insertionSort = arr => {\n  let len = arr.length;\n  let animations = [];\n\n  for (let i = 1; i < len; i++) {\n    let j = i;\n    while (j > 0 && arr[j] < arr[j - 1]) {\n      animations.push([j, j - 1]);\n      swap(arr, j, j - 1);\n      j--;\n    }\n  }\n\n  return animations;\n};\n\nconst selectionSort = arr => {\n  let len = arr.length;\n  let animations = [];\n  for (let i = 0; i < len; i++) {\n    let min = i;\n    for (let j = i + 1; j < len; j++) {\n      if (arr[min] > arr[j]) {\n        min = j;\n      }\n    }\n    if (min !== i) {\n      animations.push([min, i]);\n      swap(arr, min, i);\n    }\n  }\n  return animations;\n};\n\nconst swap = (arr, index1, index2) => {\n  var temp = arr[index1];\n  arr[index1] = arr[index2];\n  arr[index2] = temp;\n};\n\nconst bubbleSort = arr => {\n  let len = arr.length,\n    i,\n    j,\n    stop;\n\n  const animations = [];\n\n  for (i = 0; i < len; i++) {\n    for (j = 0, stop = len - i; j < stop; j++) {\n      if (arr[j] > arr[j + 1]) {\n        animations.push([j, j + 1]);\n        swap(arr, j, j + 1);\n      }\n    }\n  }\n\n  return animations;\n};\n\nexport default getAnimations;\n","import React from \"react\";\nimport classes from \"./Button.module.css\";\n\nconst button = props => (\n  <div className={[classes.Button, classes.Button3].join(\" \")} onClick={props.clicked}>\n    {props.children}\n  </div>\n);\n\nexport default button;\n","import React from \"react\";\nimport classes from \"./Range.module.css\";\n\nconst range = props => (\n  <input\n    type=\"range\"\n    name=\"range\"\n    className={classes.Range}\n    value={props.default}\n    min={props.min}\n    max={props.max}\n    onInput={props.changed}\n    onChange={props.changed}\n  />\n);\n\nexport default range;\n","import React from \"react\";\nimport Button from \"./Button/Button\";\nimport Range from \"./Range/Range\";\nimport classes from \"./InteractionBar.module.css\";\n\nimport * as constants from \"../../constants/constants\";\n\nconst interactionBar = props => {\n  const sortDetails = [\n    {\n      sortType: constants.BUBBLE_SORT,\n      displayName: \"Bubble Sort\",\n      animationSpeed: 50\n    },\n    {\n      sortType: constants.SELECTION_SORT,\n      displayName: \"Selection Sort\",\n      animationSpeed: 50\n    },\n    {\n      sortType: constants.INSERTION_SORT,\n      displayName: \"Insertion Sort\",\n      animationSpeed: 50\n    }\n  ];\n  return (\n    <div className={classes.InteractionBar}>\n      <Button clicked={props.reset}>Reset</Button>\n      <Range\n        min=\"5\"\n        max=\"300\"\n        default={props.barCount}\n        changed={event => props.changeBarCount(event.target.value)}\n      />\n      {sortDetails.map(sortDetail => (\n        <Button\n          key={sortDetail.sortType}\n          clicked={() => props.changeSortDetail(sortDetail)}\n        >\n          {sortDetail.displayName}\n        </Button>\n      ))}\n      <Button clicked={props.commence}>Commence Sort!</Button>\n    </div>\n  );\n};\n\nexport default interactionBar;\n","import React, { Component } from \"react\";\n\nimport BarsContainer from \"../../components/BarsContainer/BarsContainer\";\n\nimport classes from \"./SortingVisualizer.module.css\";\n\nimport * as constants from \"../../constants/constants\";\nimport getAnimations from \"../../helpers/sortingHelper\";\nimport InteractionBar from \"../../components/InteractionBar/InteractionBar\";\n\nclass SortingVisualizer extends Component {\n  state = {\n    sortDetail: {\n      sortType: constants.BUBBLE_SORT,\n      displayName: \"Bubble Sort\",\n      animationSpeed: 50\n    },\n    numbers: [],\n    barCount: 50\n  };\n\n  componentDidMount = () => {\n    this.handleReset();\n  };\n\n  handleSortDetailChange = sortDetail => {\n    this.setState({ ...this.state, sortDetail: sortDetail });\n  };\n\n  handleCommenceSort = () => {\n    const animations = getAnimations(\n      this.state.sortDetail.sortType,\n      this.state.numbers.slice()\n    );\n\n    animations.map((animation, index) =>\n      setTimeout(() => this.handleSwap(animation), (1000 / 60) * index)\n    );\n  };\n\n  handleSwap = indices => {\n    const newNumbers = this.state.numbers.slice();\n    const number = newNumbers[indices[0]];\n    newNumbers[indices[0]] = newNumbers[indices[1]];\n    newNumbers[indices[1]] = number;\n    this.setState({ ...this.state, numbers: newNumbers });\n  };\n\n  handleReset = () => {\n    const newNumbers = getRandomNumbers(this.state.barCount);\n    this.setState({ ...this.state, numbers: newNumbers });\n  };\n\n  handleBarCountChange = barCount => {\n    const newNumbers = getRandomNumbers(this.state.barCount);\n    this.setState({ ...this.state, numbers: newNumbers, barCount: barCount });\n  };\n\n  render() {\n    return (\n      <div className={classes.SortingVisualizer}>\n        <BarsContainer numbers={this.state.numbers} />\n        <InteractionBar\n          barCount={this.state.barCount}\n          reset={() => this.handleReset()}\n          commence={() => this.handleCommenceSort()}\n          changeSortDetail={sortDetail =>\n            this.handleSortDetailChange(sortDetail)\n          }\n          changeBarCount={value => this.handleBarCountChange(value)}\n          sortDetail={this.state.sortDetail}\n        />\n      </div>\n    );\n  }\n}\n\nconst getRandomNumbers = count => {\n  let numbers = [];\n  for (let i = 0; i < count; i++) {\n    numbers.push(getRandomInt(20, 599));\n  }\n  return numbers;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport default SortingVisualizer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./containers/SortingVisualizer/SortingVisualizer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SortingVisualizer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}