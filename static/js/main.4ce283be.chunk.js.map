{"version":3,"sources":["components/InteractionBar/Button/Button.module.css","components/BarsContainer/Bar/Bar.module.css","components/BarsContainer/BarsContainer.module.css","containers/SortingVisualizer/SortingVisualizer.module.css","components/BarsContainer/Bar/Bar.js","components/BarsContainer/BarsContainer.js","constants/constants.js","helpers/sortingHelper.js","components/InteractionBar/Button/Button.js","components/InteractionBar/InteractionBar.js","containers/SortingVisualizer/SortingVisualizer.js","store/actions/actions.js","store/actions/actionTypes.js","App.js","serviceWorker.js","store/utility.js","store/reducer/reducer.js","index.js"],"names":["module","exports","Bar","nextProps","nextState","height","this","props","className","classes","style","Component","barsContainer","BarsContainer","numbers","map","number","index","key","BUBBLE_SORT","getBubbleSortAnimations","bubbleSort","getSelectionSortAnimations","selectionSort","arr","len","length","animations","i","min","j","push","swap","index1","index2","temp","stop","getAnimations","sortType","constants","button","Button","Button3","join","onClick","clicked","children","interactionBar","InteractionBar","reset","changeSortType","commence","SortingVisualizer","state","componentDidMount","handleSortTypeChange","setState","handleCommenceSort","slice","animation","setTimeout","connect","dispatch","type","indices","actions","App","Boolean","window","location","hostname","match","updateObject","oldObject","updatedValues","initialState","getRandomNumbers","getRandomInt","max","Math","floor","random","reducer","action","newNumbers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ce283be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3qR7j\",\"Button1\":\"Button_Button1__2_rnQ\",\"Button2\":\"Button_Button2__1LiY_\",\"Button3\":\"Button_Button3__3AwsT\",\"Button4\":\"Button_Button4__3ZIM7\",\"Button5\":\"Button_Button5__2QJCN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bar\":\"Bar_Bar__3Vy_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BarsContainer\":\"BarsContainer_BarsContainer__17pOc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SortingVisualizer\":\"SortingVisualizer_SortingVisualizer__1kbp7\"};","import React, { Component } from \"react\";\nimport classes from \"./Bar.module.css\";\n\nclass Bar extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.height !== this.props.height;\n  }\n\n  render() {\n    return (\n      <div\n        className={classes.Bar}\n        style={{ height: `${this.props.height / 599 * 100}%` }}\n      ></div>\n    );\n  }\n}\n\nexport default Bar;\n","import React from \"react\";\nimport Bar from \"./Bar/Bar\";\n\nimport classes from \"./BarsContainer.module.css\";\n\nconst barsContainer = props => (\n  <div className={classes.BarsContainer}>\n    {props.numbers.map((number, index) => (\n      <Bar key={index} height={number}></Bar>\n    ))}\n  </div>\n);\n\nexport default barsContainer;\n","export const NUMBER_OF_ARRAY_BARS = 100;\n\nexport const MERGE_SORT = \"MERGE_SORT\";\n\nexport const QUICK_SORT = \"QUICK_SORT\";\n\nexport const BUBBLE_SORT = \"BUBBLE_SORT\";\n\nexport const SELECTION_SORT = \"SELECTION_SORT\";\n\nexport const INSERTION_SORT = \"INSERTION_SORT\";\n","import * as constants from \"../constants/constants\";\n\nconst getAnimations = (sortType, numbers) => {\n  let animations = [];\n  switch (sortType) {\n    case constants.BUBBLE_SORT:\n      animations = getBubbleSortAnimations(numbers);\n      break;\n    case constants.SELECTION_SORT:\n      animations = getSelectionSortAnimations(numbers);\n      break;\n    default:\n      animations = [];\n  }\n  return animations;\n};\n\nconst getBubbleSortAnimations = numbers => {\n  return bubbleSort(numbers);\n};\n\nconst getSelectionSortAnimations = numbers => {\n  return selectionSort(numbers);\n};\n\nconst selectionSort = arr => {\n  let len = arr.length;\n  let animations = [];\n  for (let i = 0; i < len; i++) {\n    let min = i;\n    for (let j = i + 1; j < len; j++) {\n      if (arr[min] > arr[j]) {\n        min = j;\n      }\n    }\n    if (min !== i) {\n      animations.push([min, i]);\n      swap(arr, min, i);\n    }\n  }\n  return animations;\n};\n\nconst swap = (arr, index1, index2) => {\n  var temp = arr[index1];\n  arr[index1] = arr[index2];\n  arr[index2] = temp;\n};\n\nconst bubbleSort = arr => {\n  let len = arr.length,\n    i,\n    j,\n    stop;\n\n  const animations = [];\n\n  for (i = 0; i < len; i++) {\n    for (j = 0, stop = len - i; j < stop; j++) {\n      if (arr[j] > arr[j + 1]) {\n        animations.push([j, j + 1]);\n        swap(arr, j, j + 1);\n      }\n    }\n  }\n\n  return animations;\n};\n\nexport default getAnimations;\n","import React from \"react\";\nimport classes from \"./Button.module.css\";\n\nconst button = props => (\n  <div className={[classes.Button, classes.Button3].join(\" \")} onClick={props.clicked}>\n    {props.children}\n  </div>\n);\n\nexport default button;\n","import React from \"react\";\nimport Button from \"./Button/Button\";\nimport classes from \"./InteractionBar.module.css\";\n\nimport * as constants from \"../../constants/constants\";\n\nconst interactionBar = props => {\n  const options = [\n    {\n      sortType: constants.BUBBLE_SORT,\n      displayName: \"Bubble Sort\"\n    },\n    {\n      sortType: constants.SELECTION_SORT,\n      displayName: \"Selection Sort\"\n    },\n    {\n      sortType: constants.INSERTION_SORT,\n      displayName: \"Insertion Sort\"\n    }\n  ];\n  return (\n    <div className={classes.InteractionBar}>\n      <Button clicked={props.reset}>Reset</Button>\n      <Button clicked={() => props.changeSortType(constants.BUBBLE_SORT)}>\n        Bubble Sort\n      </Button>\n      <Button clicked={() => props.changeSortType(constants.INSERTION_SORT)}>\n        Insertion Sort\n      </Button>\n      <Button clicked={() => props.changeSortType(constants.SELECTION_SORT)}>\n        Selection Sort\n      </Button>\n      <Button clicked={props.commence}>Commence Sort!</Button>\n    </div>\n  );\n};\n\nexport default interactionBar;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport BarsContainer from \"../../components/BarsContainer/BarsContainer\";\n\nimport classes from \"./SortingVisualizer.module.css\";\n\nimport * as actions from \"../../store/actions/actions\";\nimport * as constants from \"../../constants/constants\";\nimport getAnimations from \"../../helpers/sortingHelper\";\nimport InteractionBar from \"../../components/InteractionBar/InteractionBar\";\n\nclass SortingVisualizer extends Component {\n  state = {\n    sortType: constants.BUBBLE_SORT\n  };\n\n  componentDidMount = () => {\n    this.props.reset();\n  };\n\n  handleSortTypeChange = sortType => {\n    this.setState({ ...this.state, sortType: sortType });\n  };\n\n  handleCommenceSort = () => {\n    const animations = getAnimations(\n      this.state.sortType,\n      this.props.numbers.slice()\n    );\n\n    animations.map((animation, index) =>\n      setTimeout(() => this.props.swap(animation), index * 100)\n    );\n  };\n\n  render() {\n    return (\n      <div className={classes.SortingVisualizer}>\n        <BarsContainer numbers={this.props.numbers} />\n        <InteractionBar\n          reset={() => this.props.reset()}\n          commence={() => this.handleCommenceSort()}\n          changeSortType={sortType => this.handleSortTypeChange(sortType)}\n          sortType={this.state.sortType}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    numbers: state.numbers\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reset: () => dispatch(actions.resetNumbers()),\n    swap: indices => dispatch(actions.swap(indices))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingVisualizer);\n","import * as actionTypes from \"./actionTypes\";\n\nexport const resetNumbers = () => {\n  return {\n    type: actionTypes.RESET_NUMBERS\n  };\n};\n\nexport const swap = indices => {\n  return {\n    type: actionTypes.SWAP,\n    indices: indices\n  };\n};\n\nexport const setAnimations = animations => {\n  return {\n    type: actionTypes.SET_ANIMATIONS,\n    animations: animations\n  };\n};\n","export const RESET_NUMBERS = \"RESET_NUMBERS\";\nexport const SET_ANIMATIONS = \"SET_ANIMATIONS\";\nexport const SWAP = \"SWAP\";\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./containers/SortingVisualizer/SortingVisualizer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SortingVisualizer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedValues) => {\n  return {\n    ...oldObject,\n    ...updatedValues  \n  }\n};","import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../utility\";\nimport * as constants from \"../../constants/constants\";\n\nconst initialState = {\n  numbers: [],\n};\n\nconst getRandomNumbers = () => {\n  let numbers = [];\n  for (let i = 0; i < constants.NUMBER_OF_ARRAY_BARS; i++) {\n    numbers.push(getRandomInt(20, 599));\n  }\n  return numbers;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.RESET_NUMBERS:\n      const numbers = getRandomNumbers();\n      return updateObject(state, { numbers: numbers });\n    case actionTypes.SWAP:\n      const newNumbers = state.numbers.slice();\n      const number = newNumbers[action.indices[0]];\n      newNumbers[action.indices[0]] = newNumbers[action.indices[1]];\n      newNumbers[action.indices[1]] = number;\n      return updateObject(state, { numbers: newNumbers });\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer from \"./store/reducer/reducer.js\";\n\nconst store = createStore(\n  reducer /* preloadedState, */,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}